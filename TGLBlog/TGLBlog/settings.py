"""
Django settings for TGLBlog project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv


load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_JWT')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "app",
    "rest_framework",
    'drf_spectacular',
    'drf_spectacular_sidecar',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "app.middlewares.jwt_auth.JWTAuth",
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = "TGLBlog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "TGLBlog.wsgi.application"

#Cors
CORS_ORIGIN_ALLOW_ALL = True


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

MONGO_URI = os.getenv('MONGO_URI')

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'TGLBlog',
        'CLIENT': {
            'host': os.getenv('MONGO_URI'),  # URL de tu servidor MongoDB
            'maxPoolSize': 10,
        }
    }
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URI'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# DOCS drf-spectacular-sidecar
# SPECTACULAR_SETTINGS = {
#     'TITLE': 'TGLBlog',
#     'DESCRIPTION': 'Blog of whatever you want to share.',
#     'VERSION': '1.0.0',
#     'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
#     'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
#     'REDOC_DIST': 'SIDECAR',
#     'SERVE_INCLUDE_SCHEMA': False,
#     # OTHER SETTINGS
# }

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Otras clases de autenticación, si las tienes
    ),
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'TGLBlog',
    'DESCRIPTION': 'A blog where you can post anything.',
    'VERSION': '1.0.0',
    'SERVERS': [
        {'url': 'https://localhost', 'description': 'Servidor principal'},
    ],
    'SECURITY_DEFINITIONS': {
        'Bearer Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'JWT token',
        },
    },
    'SERVE_URLCONFS': [
        'app.urls.urlpatterns.users',  # Reemplaza 'miapp.urls' con la ubicación de tus rutas en tu proyecto
        # Agrega más rutas o vistas si es necesario
    ],
}

# TEST
ENVIRONMENT = os.getenv('ENVIRONMENT')

#Redis

BROKER_URL = os.getenv('REDIS_URI')
CELERY_ACCEPT_CONTENT = ['json', 'pickle']
CELERY_TASK_SERIALIZER = 'pickle'
CELERY_RESULT_SERIALIZER = 'pickle'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
BROKER_POOL_LIMIT = 10

#Mail config

AWS_SES_REGION = os.getenv('AWS_SES_REGION')
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
AWS_SES_REGION_NAME = os.getenv('AWS_SES_REGION_NAME')
EMAIL_HOST = os.getenv('AWS_SES_REGION_ENDPOINT')
